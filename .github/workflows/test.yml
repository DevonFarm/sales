name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Generate coverage report
      run: |
        go test -coverprofile=coverage.out ./utils/... ./horse/... ./user/... ./farm/...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      cockroachdb:
        image: cockroachdb/cockroach:latest
        ports:
          - 26257:26257
        options: --health-cmd="curl -f http://localhost:8080/health" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          COCKROACH_DATABASE: test_db
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Install task runner
      run: go install github.com/go-task/task/v3/cmd/task@latest
    
    - name: Install go-migrate
      run: go install -tags 'postgres,cockroachdb' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
    
    - name: Wait for CockroachDB
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
    
    - name: Run migrations
      env:
        MIGRATIONS_DSN: postgresql://root@localhost:26257/defaultdb?sslmode=disable
      run: task db-migrate
    
    - name: Run integration tests
      env:
        TEST_DATABASE_URL: postgresql://root@localhost:26257/defaultdb?sslmode=disable
      run: make test-integration

  handler-tests:
    name: HTTP Handler Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Run handler tests
      run: make test-handlers

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      cockroachdb:
        image: cockroachdb/cockroach:latest
        ports:
          - 26257:26257
        options: --health-cmd="curl -f http://localhost:8080/health" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/e2e/package-lock.json
    
    - name: Install task runner
      run: go install github.com/go-task/task/v3/cmd/task@latest
    
    - name: Install go-migrate
      run: go install -tags 'postgres,cockroachdb' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
    
    - name: Wait for CockroachDB
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
    
    - name: Run migrations
      env:
        MIGRATIONS_DSN: postgresql://root@localhost:26257/defaultdb?sslmode=disable
      run: task db-migrate
    
    - name: Install E2E test dependencies
      run: |
        cd tests/e2e
        npm ci
        npx playwright install --with-deps
    
    - name: Run E2E tests
      env:
        TEST_DATABASE_URL: postgresql://root@localhost:26257/defaultdb?sslmode=disable
        TEST_STYTCH_PROJECT_ID: ${{ secrets.TEST_STYTCH_PROJECT_ID }}
        TEST_STYTCH_SECRET: ${{ secrets.TEST_STYTCH_SECRET }}
      run: make test-e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/e2e/playwright-report/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m