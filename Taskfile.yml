# https://taskfile.dev

version: "3"

dotenv: [".env"]

tasks:
  default:
    desc: List the available tasks
    cmds:
      - task --list
    silent: true
  setup-ci:
    desc: "Setup CI environment"
    cmds:
      - task: install-db-cert
      - task: install-go-migrate
  setup:
    desc: "Setup the project workspace"
    cmds:
      - task: setup-ci
      - |
        if ! command -v brew >/dev/null 2>&1; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
      - |
        if ! command -v cockroach >/dev/null 2>&1; then
          brew install cockroachdb/tap/cockroach
        fi
  install-db-cert:
    desc: "Install the CockroachDB certificate"
    cmds:
      - echo "Installing the CockroachDB certificate..."
      - |
        if [ -z "$COCKROACH_CLUSTER_ID" ]; then
          echo "Error: COCKROACH_CLUSTER_ID environment variable is not set"
          exit 1
        fi
        URL="https://cockroachlabs.cloud/clusters/$COCKROACH_CLUSTER_ID/cert"
        curl --create-dirs -o "$HOME/.postgresql/root.crt" "$URL"
  install-go-migrate:
    desc: "Install go-migrate"
    cmds:
      - echo "Installing go-migrate..."
      - go install -tags 'postgres,cockroachdb' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
  db-migrate:
    desc: "Run database migrations"
    cmds:
      - echo "Running db migrations..."
      - |
        if [ -z "$MIGRATIONS_DSN" ]; then
          echo "Error: MIGRATIONS_DSN environment variable is not set"
          exit 1
        fi
        migrate -database "${MIGRATIONS_DSN}" -path ./database/migrations up
  db-create-migration:
    desc: "Create a new database migration (usage: task db-create-migration -- migration_name)"
    cmds:
      - echo "Creating new migration..."
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Error: Migration name is required"
          echo "Usage: task db-create-migration -- migration_name"
          exit 1
        fi
        migrate create -ext sql -dir ./database/migrations {{.CLI_ARGS}}
  sql:
    desc: "Open a SQL shell to the database"
    cmds:
      - |
        if [ -z "$COCKROACH_DSN" ]; then
          echo "Error: COCKROACH_DSN environment variable is not set"
          exit 1
        fi
        cockroach sql --url="$COCKROACH_DSN"

  # Testing tasks
  test:
    desc: "Run unit tests (fast)"
    cmds:
      - task: test-unit

  test-unit:
    desc: "Run unit tests only"
    cmds:
      - echo "Running unit tests..."
      - go test -v ./utils/... ./horse/... ./user/... ./farm/...

  test-integration:
    desc: "Run integration tests (requires $TEST_DATABASE_URL to be set)"
    cmds:
      - echo "Running integration tests..."
      - |
        if [ -z "$TEST_DATABASE_URL" ]; then
          echo "Error: TEST_DATABASE_URL environment variable not set"
          echo "Example: export TEST_DATABASE_URL='postgresql://root@localhost:26257/test_db?sslmode=disable'"
          exit 1
        fi
      - go test -v ./tests/integration/...

  test-handlers:
    desc: "Run HTTP handler tests"
    cmds:
      - echo "Running HTTP handler tests..."
      - go test -v ./tests/handlers/...

  test-e2e:
    desc: "Run end-to-end tests with Playwright"
    cmds:
      - echo "Running end-to-end tests..."
      - cd tests/e2e && npm test

  test-e2e-headed:
    desc: "Run end-to-end tests with visible browser"
    cmds:
      - echo "Running end-to-end tests (headed)..."
      - cd tests/e2e && npm run test:headed

  test-e2e-ui:
    desc: "Open Playwright UI for test development"
    cmds:
      - cd tests/e2e && npm run test:ui

  test-all:
    desc: "Run all Go tests"
    cmds:
      - task: test-unit
      - task: test-integration
      - task: test-handlers

  test-sql:
    desc: "Open a SQL shell to the database identified by the $TEST_DATABASE_URL"
    cmds:
      - |
        if [ -z "$TEST_DATABASE_URL" ]; then
          echo "Error: TEST_DATABASE_URL environment variable is not set"
          exit 1
        fi
        cockroach sql --url="$TEST_DATABASE_URL"

  # Cleanup tasks
  clean-db:*:
    desc: "Drop and recreate test database. (usage: task clean-db:<database_name>)"
    vars:
      DB_NAME: "{{ index .MATCH 0 }}"
    cmds:
      - |
        export DB_NAME="{{.DB_NAME}}"
        if [ "$DB_NAME" == "" ]; then
          DB_NAME="dfsales_test_default"
        fi
        if [ -z "$TEST_DATABASE_URL" ]; then
          echo "Error: TEST_DATABASE_URL environment variable not set"
          echo "Example: export TEST_DATABASE_URL='postgresql://root@localhost:26257/test_db?sslmode=disable'"
          exit 1
        fi
        go run tests/util/cmd/main.go -clean-db "${DB_NAME}"
